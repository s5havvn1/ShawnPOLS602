?sample
set.seed(123)
# Suppose the population is composed of 20% individuals from Party A, 10% individuals from Party B, 30% individuals from Party C, 40% individuals from Party D
# 1) Define population size N and sample size n
N <- 100000              # population size
n <- 200                 # sample size per draw
# 2) Define trait labels and their probabilities
traits <- c("A", "B", "C", "D")
p      <- c(0.20, 0.10, 0.30, 0.40)   # must sum to 1
# 3) Population
pop <- sample(traits, size = N, replace = TRUE, prob = p)
# 4) Simple random sample of size n without replacement
samp_1 <- sample (pop, size = n, replace = FALSE)
prop.table(table(pop))
prop.table(samp_1)
prop.table(table(pop))
prop.table(table(samp_1))
?rbinom
T <- rbinom (N, size = 1, prob = o.5)
T <- rbinom (N, size = 1, prob = 0.5)
prop.table(table(T))
set.seed(123)
results <- matrix(NA, nrow = 1000, ncol = 8)
colnames(results) <- c("A_treat","B_treat","C_treat","D_treat",
"A_ctrl","B_ctrl","C_ctrl","D_ctrl")
#iterate over 1000 times
for(i in 1:1000){
#generate data
samp_n <- sample (pop, size=n, replace = FALSE)
prop_treat <- prop.table(table(factor(samp[trt == 1], levels = traits)))
prop_ctrl <- prop.table(table(factor(samp[trt == 0], levels = traits)))
results[i, 1:4] <- prop_treat
results[i, 5:8] <- prop_ctrl
}
set.seed(123)
results <- matrix(NA, nrow = 1000, ncol = 8)
colnames(results) <- c("A_treat","B_treat","C_treat","D_treat",
"A_ctrl","B_ctrl","C_ctrl","D_ctrl")
#iterate over 1000 times
for(i in 1:1000){
#generate data
samp_n <- sample (pop, size=n, replace = FALSE)
prop_treat <- prop.table(table(factor(samp[T == 1], levels = traits)))
prop_ctrl <- prop.table(table(factor(samp[T == 0], levels = traits)))
results[i, 1:4] <- prop_treat
results[i, 5:8] <- prop_ctrl
}
set.seed(123)
results <- matrix(NA, nrow = 1000, ncol = 8)
colnames(results) <- c("A_treat","B_treat","C_treat","D_treat",
"A_ctrl","B_ctrl","C_ctrl","D_ctrl")
#iterate over 1000 times
for(i in 1:1000){
#generate data
samp_n <- sample (pop, size=n, replace = FALSE)
T <- rbinom(n, size = 1, prob = 0.5)
prop_treat <- prop.table(table(factor(samp[T == 1], levels = traits)))
prop_ctrl <- prop.table(table(factor(samp[T == 0], levels = traits)))
results[i, 1:4] <- prop_treat
results[i, 5:8] <- prop_ctrl
}
set.seed(123)
results <- matrix(NA, nrow = 1000, ncol = 8)
colnames(results) <- c("A_treat","B_treat","C_treat","D_treat",
"A_ctrl","B_ctrl","C_ctrl","D_ctrl")
#iterate over 1000 times
for(i in 1:R){
samp_n <- sample(pop, size = n, replace = FALSE)
trt <- rbinom(n, size = 1, prob = 0.5)
prop_treat <- prop.table(table(factor(samp_n[trt == 1], levels = traits)))
prop_ctrl  <- prop.table(table(factor(samp_n[trt == 0], levels = traits)))
results[i, 1:4] <- as.numeric(prop_treat)
results[i, 5:8] <- as.numeric(prop_ctrl)
}
set.seed(123)
results <- matrix(NA, nrow = 1000, ncol = 8)
colnames(results) <- c("A_treat","B_treat","C_treat","D_treat",
"A_ctrl","B_ctrl","C_ctrl","D_ctrl")
#iterate over 1000 times
for(i in 1:1000){
samp_n <- sample(pop, size = n, replace = FALSE)
trt <- rbinom(n, size = 1, prob = 0.5)
prop_treat <- prop.table(table(factor(samp_n[trt == 1], levels = traits)))
prop_ctrl  <- prop.table(table(factor(samp_n[trt == 0], levels = traits)))
results[i, 1:4] <- as.numeric(prop_treat)
results[i, 5:8] <- as.numeric(prop_ctrl)
}
colMeans(results, na.rm = TRUE)
set.seed(123)
results <- matrix(NA, nrow = 10, ncol = 8)
colnames(results) <- c("A_treat","B_treat","C_treat","D_treat",
"A_ctrl","B_ctrl","C_ctrl","D_ctrl")
#iterate over 1000 times
for(i in 1:10){
samp_n <- sample(pop, size = n, replace = FALSE)
trt <- rbinom(n, size = 1, prob = 0.5)
prop_treat <- prop.table(table(factor(samp_n[trt == 1], levels = traits)))
prop_ctrl  <- prop.table(table(factor(samp_n[trt == 0], levels = traits)))
results[i, 1:4] <- as.numeric(prop_treat)
results[i, 5:8] <- as.numeric(prop_ctrl)
}
colMeans(results, na.rm = TRUE)
set.seed(123)
results <- matrix(NA, nrow = 50, ncol = 8)
colnames(results) <- c("A_treat","B_treat","C_treat","D_treat",
"A_ctrl","B_ctrl","C_ctrl","D_ctrl")
#iterate over 1000 times
for(i in 1:50){
samp_n <- sample(pop, size = n, replace = FALSE)
trt <- rbinom(n, size = 1, prob = 0.5)
prop_treat <- prop.table(table(factor(samp_n[trt == 1], levels = traits)))
prop_ctrl  <- prop.table(table(factor(samp_n[trt == 0], levels = traits)))
results[i, 1:4] <- as.numeric(prop_treat)
results[i, 5:8] <- as.numeric(prop_ctrl)
}
colMeans(results, na.rm = TRUE)
set.seed(123)
results <- matrix(NA, nrow = 500, ncol = 8)
colnames(results) <- c("A_treat","B_treat","C_treat","D_treat",
"A_ctrl","B_ctrl","C_ctrl","D_ctrl")
#iterate over 1000 times
for(i in 1:500){
samp_n <- sample(pop, size = n, replace = FALSE)
trt <- rbinom(n, size = 1, prob = 0.5)
prop_treat <- prop.table(table(factor(samp_n[trt == 1], levels = traits)))
prop_ctrl  <- prop.table(table(factor(samp_n[trt == 0], levels = traits)))
results[i, 1:4] <- as.numeric(prop_treat)
results[i, 5:8] <- as.numeric(prop_ctrl)
}
colMeans(results, na.rm = TRUE)
set.seed(123)
results <- matrix(NA, nrow = 1000, ncol = 8)
colnames(results) <- c("A_treat","B_treat","C_treat","D_treat",
"A_ctrl","B_ctrl","C_ctrl","D_ctrl")
#iterate over 1000 times
for(i in 1:1000){
samp_n <- sample(pop, size = n, replace = FALSE)
trt <- rbinom(n, size = 1, prob = 0.5)
prop_treat <- prop.table(table(factor(samp_n[trt == 1], levels = traits)))
prop_ctrl  <- prop.table(table(factor(samp_n[trt == 0], levels = traits)))
results[i, 1:4] <- as.numeric(prop_treat)
results[i, 5:8] <- as.numeric(prop_ctrl)
}
colMeans(results, na.rm = TRUE)
set.seed(123)
results <- matrix(NA, nrow = 1000, ncol = 8)
colnames(results) <- c("A_treat","B_treat","C_treat","D_treat",
"A_ctrl","B_ctrl","C_ctrl","D_ctrl")
#iterate over 1000 times
for(i in 1:1000){
samp_n <- sample(pop, size = n, replace = FALSE)
trt <- rbinom(n, size = 1, prob = 0.5)
prop_treat <- prop.table(table(factor(samp_n[trt == 1], levels = traits)))
prop_ctrl  <- prop.table(table(factor(samp_n[trt == 0], levels = traits)))
results[i, 1:4] <- as.numeric(prop_treat)
results[i, 5:8] <- as.numeric(prop_ctrl)
}
colMeans(results, na.rm = TRUE)
set.seed(123)
R <- 1000
results <- matrix(NA_real_, nrow = R, ncol = 12)
colnames(results) <- c(paste0(traits, "_overall"),
paste0(traits, "_treat"),
paste0(traits, "_ctrl"))
for(i in 1:R){
samp <- sample(pop, size = n, replace = FALSE)
trt  <- rbinom(n, size = 1, prob = 0.5)
prop_overall <- prop.table(table(factor(samp,              levels = traits)))
prop_treat   <- if(sum(trt==1)>0) prop.table(table(factor(samp[trt==1], levels = traits))) else rep(NA,4)
prop_ctrl    <- if(sum(trt==0)>0) prop.table(table(factor(samp[trt==0], levels = traits))) else rep(NA,4)
results[i, 1:4]  <- as.numeric(prop_overall)
results[i, 5:8]  <- as.numeric(prop_treat)
results[i, 9:12] <- as.numeric(prop_ctrl)
}
# 眼睛检验：Monte Carlo 平均比例 —— 应接近总体 p_pop
round(colMeans(results, na.rm = TRUE), 3)
set.seed(123)
ns <- c(25, 50, 100, 250, 500, 1000)   # 你可以改
R  <- 400
summ <- matrix(NA_real_, nrow = length(ns), ncol = 1 + 3)
colnames(summ) <- c("n",
"mean|sample - pop|",
"mean|max|treat - ctrl||",
"sd_overall_A")  # 示意再给一个波动指标
for(k in seq_along(ns)){
n_k <- ns[k]
# 存储：overall/treat/ctrl（只用A,B,C,D各自的比例都可以，这里还算偏差）
res_k <- matrix(NA_real_, nrow = R, ncol = 12)
for(i in 1:R){
samp <- sample(pop, size = n_k, replace = FALSE)
trt  <- rbinom(n_k, size = 1, prob = 0.5)
prop_overall <- prop.table(table(factor(samp,              levels = traits)))
prop_treat   <- if(sum(trt==1)>0) prop.table(table(factor(samp[trt==1], levels = traits))) else rep(NA,4)
prop_ctrl    <- if(sum(trt==0)>0) prop.table(table(factor(samp[trt==0], levels = traits))) else rep(NA,4)
res_k[i, 1:4]  <- as.numeric(prop_overall)
res_k[i, 5:8]  <- as.numeric(prop_treat)
res_k[i, 9:12] <- as.numeric(prop_ctrl)
}
# 指标1：样本整体与总体的平均绝对偏差（四个党派的平均）
mad_overall <- mean(rowMeans(abs(res_k[,1:4] - matrix(p_pop, nrow=R, ncol=4, byrow=TRUE)), na.rm=TRUE), na.rm=TRUE)
# 指标2：treat 与 ctrl 的最大绝对差（四个党派里取最大），再对 R 次取平均
maxdiff_tc <- mean(apply(abs(res_k[,5:8] - res_k[,9:12]), 1, max), na.rm = TRUE)
# 指标3：给个波动示例——overall 中 A 的标准差
sd_overall_A <- sd(res_k[, "A_overall"], na.rm = TRUE)
summ[k,] <- c(n_k, mad_overall, maxdiff_tc, sd_overall_A)
}
# Population proportions (ground truth)
p_pop <- as.numeric(prop.table(table(factor(pop, levels = traits))))
names(p_pop) <- traits
p_pop
set.seed(123)
ns <- c(25, 50, 100, 250, 500, 1000)   # 你可以改
R  <- 400
summ <- matrix(NA_real_, nrow = length(ns), ncol = 1 + 3)
colnames(summ) <- c("n",
"mean|sample - pop|",
"mean|max|treat - ctrl||",
"sd_overall_A")  # 示意再给一个波动指标
for(k in seq_along(ns)){
n_k <- ns[k]
# 存储：overall/treat/ctrl（只用A,B,C,D各自的比例都可以，这里还算偏差）
res_k <- matrix(NA_real_, nrow = R, ncol = 12)
for(i in 1:R){
samp <- sample(pop, size = n_k, replace = FALSE)
trt  <- rbinom(n_k, size = 1, prob = 0.5)
prop_overall <- prop.table(table(factor(samp,              levels = traits)))
prop_treat   <- if(sum(trt==1)>0) prop.table(table(factor(samp[trt==1], levels = traits))) else rep(NA,4)
prop_ctrl    <- if(sum(trt==0)>0) prop.table(table(factor(samp[trt==0], levels = traits))) else rep(NA,4)
res_k[i, 1:4]  <- as.numeric(prop_overall)
res_k[i, 5:8]  <- as.numeric(prop_treat)
res_k[i, 9:12] <- as.numeric(prop_ctrl)
}
# 指标1：样本整体与总体的平均绝对偏差（四个党派的平均）
mad_overall <- mean(rowMeans(abs(res_k[,1:4] - matrix(p_pop, nrow=R, ncol=4, byrow=TRUE)), na.rm=TRUE), na.rm=TRUE)
# 指标2：treat 与 ctrl 的最大绝对差（四个党派里取最大），再对 R 次取平均
maxdiff_tc <- mean(apply(abs(res_k[,5:8] - res_k[,9:12]), 1, max), na.rm = TRUE)
# 指标3：给个波动示例——overall 中 A 的标准差
sd_overall_A <- sd(res_k[, "A_overall"], na.rm = TRUE)
summ[k,] <- c(n_k, mad_overall, maxdiff_tc, sd_overall_A)
}
par(mfrow=c(1,3))
boxplot(results[, "A_overall"], main=paste0("Overall A (n=", n, ")"), ylab="Proportion of A"); abline(h=p_pop["A"], lty=2)
boxplot(results[, "A_treat"  ], main="Treatment A", ylab="Proportion of A");  abline(h=p_pop["A"], lty=2)
boxplot(results[, "A_ctrl"   ], main="Control A",   ylab="Proportion of A");  abline(h=p_pop["A"], lty=2)
par(mfrow=c(1,1))
setwd("~/GitHub/ShawnPOLS602")
voting <- read.csv("voting.csv")
View(voting)
class(voting$message)
class(voting$message)
# Treatment is the social pressure message, it is a discrete variable, the data type is character/string
voting$treatment <- ifelse (voting$message = 1, 1, 0)
voting$treatment <- ifelse (voting$message == 1, 1, 0)
View(voting)
voting <- read.csv("voting.csv")
class(voting$message)
# Treatment is the social pressure message, it is a discrete variable, the data type is character/string
voting$treatment <- ifelse (voting$message == "yes", 1, 0)
View(voting)
View(voting)
avg_outcome <- voting %>%
group_by (treatment) %>%
summarise (avg_outcome = mean (voted, na.rm = TRUE))
```{r}
library ("dplyr")
avg_outcome <- voting %>%
group_by (treatment) %>%
summarise (avg_outcome = mean (voted, na.rm = TRUE))
View(avg_outcome)
View(avg_outcome)
View(avg_outcome)
avg_outcome_treatment <- avg_outcome$avg_outcome[avg_outcome$treatment = 1]
avg_outcome_treatment <- avg_outcome$avg_outcome[avg_outcome$treatment == 1]
avg_outcome_control <- avg_outcome$avg_outcome[avg_outcome$treatment == 0]
avg_outcome_treatment
avg_outcome_control
View(voting)
View(avg_outcome)
treatment_data <- voting[voting$treatment == 1]
View(voting)
treatment_data <- voting[voting$treatment == 1, ]
control_data <- voting[voting$treatment == 0, ]
#What is the average birth year for the treatment and control groups?
avg_birth_treatment <- mean(treatment_data$birth)
avg_birth_control <- mean(control_data$birth)
avg_birth_treatment
avg_birth_control
estimated_effect <- avg_outcome_treatment - avg_outcome_control
estimated_effect
View(voting)
class(voting$voted)
class(voting$voted)
class(voting)
class(voting$birth)
